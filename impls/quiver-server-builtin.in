#!/usr/bin/python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import os
import sys

default_home = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default_home)
sys.path.insert(0, os.path.join(home, "python"))

import collections
import uuid

from plano import *
from quiver.server import *
from quiver.server import __version__

def main():
    enable_logging("warn")

    if len(ARGS) == 1:
        print("Quiver's builtin message broker {}".format(__version__))
        print(__file__)
        print("Python {}".format(" ".join(sys.version.split())))
        exit()

    kwargs = parse_keyword_args(ARGS[1:])

    scheme = kwargs["scheme"] if "scheme" in kwargs and kwargs["scheme"] else "amqp"
    host = kwargs["host"]
    port = kwargs["port"]
    path = kwargs["path"]
    ready_file = kwargs["ready-file"]
    cert = kwargs["cert"] if "cert" in kwargs else None
    key = kwargs["key"] if "key" in kwargs else None
    key_password = kwargs["key-password"] if "key-password" in kwargs else None
    trusted_db = kwargs["trusted-db"] if "trusted-db" in kwargs else None
    user = kwargs["user"] if "user" in kwargs else None
    password = kwargs["password"] if "password" in kwargs else None

    broker = BuiltinBroker(scheme, host, port, path, ready_file,
                           cert=cert,
                           key=key,
                           key_password=key_password,
                           trusted_db=trusted_db,
                           user=user,
                           password=password)
    broker.init()
    broker.run()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
