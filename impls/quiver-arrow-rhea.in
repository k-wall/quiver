#!/usr/bin/node 

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

"use strict";

var fs = require('fs');

let home = "@quiver_home@";

if (process.env.hasOwnProperty("QUIVER_HOME")) {
    home = process.env.QUIVER_HOME;
}

const rhea = require(home + "/javascript/node_modules/rhea");
const types = require(home + "/javascript/node_modules/rhea/lib/types.js");

if (process.argv.length === 2) {
    let data = require(home + "/javascript/node_modules/rhea/package.json");
    process.stdout.write("Rhea " + data.version + "\n");
    process.exit(0);
}

const kwargs = {};

for (let arg of process.argv.slice(2)) {
    let elems = arg.split("=", 2);
    kwargs[elems[0]] = elems[1];
}

const container = rhea.create_container({id: kwargs["id"]});

const connection_mode = kwargs["connection-mode"];
const channel_mode = kwargs["channel-mode"];
const operation = kwargs["operation"];
const scheme = kwargs["scheme"] ? kwargs["scheme"] : "amqp";
const host = kwargs["host"];
const port = kwargs["port"];
const path = kwargs["path"];
const username = kwargs["username"] ? kwargs["username"] : "anonymous";
const password = kwargs["password"];
const cert = kwargs["cert"];
const key = kwargs["key"];
const desired_duration = parseInt(kwargs["duration"]);
const desired_count = parseInt(kwargs["count"]);
const body_size = parseInt(kwargs["body-size"]);
const credit_window = parseInt(kwargs["credit-window"]);
const transaction_size = parseInt(kwargs["transaction-size"]);
const durable = new Boolean(parseInt(kwargs["durable"]));

let a = new Array(body_size);

for (let i = 0; i < a.length; i++) {
    a[i] = 120;
}

const body = types.wrap_binary(new Uint8Array(a));

let start_time;
let sent = 0;
let received = 0;
let accepted = 0;

let connection;
let listener;

function eprint(message) {
    process.stderr.write("quiver-arrow: error: ");
    process.stderr.write(message);
    process.stderr.write("\n");
}

const buffer = new Buffer(5120);
let offset = 0;

function flush() {
    if (offset) {
        process.stdout.write(buffer.toString('ascii', 0, offset));
        offset = 0;
    }
}

function write(message) {
    if (offset + message.length >= buffer.length) {
        flush();
    }

    buffer.write(message, offset, message.length, 'ascii');
    offset += message.length;
}

function stop() {
    if (connection) {
        connection.close();
    }

    if (listener) {
        listener.close();
    }
}

container.on("connection_close", function(event) {
    flush();
});

container.on("connection_open", function(event) {
    if (connection_mode == "server") {
        connection = event.connection;
        connection.open();
    }

    if (channel_mode == "passive") {
        return;
    }

    if (operation == "send") {
        let options = {
            target: {
                address: path,
                durable: false
            }
        };

        event.connection.open_sender(options);
    } else if (operation == "receive") {
        let options = {
            source: {
                address: path,
                durable: false
            },
            prefetch: credit_window
        };

        event.connection.open_receiver(options);
    } else {
        throw new Error();
    }
});

container.on("receiver_open", function (event) {
    let target = {
        address: event.receiver.remote.attach.target.address
    };

    event.receiver.set_target(target);
});

container.on("sendable", function(event) {
    while (event.sender.sendable()) {
        if (desired_count > 0 && sent == desired_count) {
            break;
        }

        let id = (sent + 1).toString();
        let stime = types.wrap_long(new Date().getTime());

        let message = {
            message_id: id,
            application_properties: {
                SendTime: stime,
            },
            durable: durable,
            body: body,
        };

        event.sender.send(message);
        sent++;

        write(id + "," + stime + "\n");
    }
});

container.on("accepted", function(event) {
    accepted++;

    if (accepted == desired_count) {
        stop();
    }
});

container.on("message", function(event) {
    received++;

    let message = event.message;
    let rtime = new Date().getTime();
    let stime = message.application_properties.SendTime;

    write(message.id + "," + stime + "," + rtime + "\n");

    if (received == desired_count) {
        stop();
    }
});

if (transaction_size > 0) {
    eprint("This impl doesn't support transactions");
    process.exit(1);
}

start_time = new Date().getTime();

if (desired_duration > 0) {
    setTimeout(function() { stop(); }, desired_duration * 1000);
}

let tls = scheme === "amqps"
if (connection_mode === "client") {
    connection = container.connect({
        username: username,
        password: password,
        host: host,
        port: port,
        scheme: scheme,
        transport: tls ? "tls" : "tcp",
        rejectUnauthorized: false, // don't verify tls peer
        key: key && cert ? fs.readFileSync(key) : null,
        cert: key && cert ? fs.readFileSync(cert) : null
    });
} else if (connection_mode === "server") {
    if (tls) {
        throw new Error("This impl can't be a server and support TLS");
    }
    container.sasl_server_mechanisms.enable_anonymous();
    listener = container.listen({host: host, port: port});
} else {
    throw new Error();
}
