#!/usr/bin/python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import os
import sys
import time
import uuid

from proton import Message, VERSION, __file__ as proton_module_file
from proton.handlers import MessagingHandler
from proton.reactor import Container, SSLDomain

default_home = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default_home)
sys.path.insert(0, os.path.join(home, "python"))

from plano import *
from quiver.common import *

class Handler(MessagingHandler):
    def __init__(self, **kwargs):
        super(Handler, self).__init__(**kwargs)

        self.connection_mode = None
        self.channel_mode = None
        self.operation = None
        self.host = None
        self.port = None
        self.path = None
        self.desired_duration = None
        self.desired_count = None
        self.body_size = None
        self.durable = False

        self.connection = None
        self.listener = None
        self.body = None

        self.start_time = None
        self.sent = 0
        self.received = 0
        self.accepted = 0

    def on_start(self, event):
        self.body = b"x" * self.body_size

        server = "{}://{}:{}".format(self.scheme, self.host, self.port)

        if self.connection_mode == "client":
            if self.username or self.password:
                self.connection = event.container.connect(server,
                                                          user = self.username,
                                                          password = self.password,
                                                          ssl_domain = self.ssl_domain)
            else:
                self.connection = event.container.connect(server,
                                                          allowed_mechs = "ANONYMOUS",
                                                          ssl_domain = self.ssl_domain)
        elif self.connection_mode == "server":
            self.listener = event.container.listen(server)
        else:
            raise Exception()

        self.start_time = time.time()

        if self.desired_duration > 0:
            event.container.schedule(self.desired_duration, self)

    def on_timer_task(self, event):
        self.stop(event)

    def on_connection_opened(self, event):
        if self.channel_mode == "active":
            if self.operation == "send":
                event.container.create_sender(event.connection, self.path)
            elif self.operation == "receive":
                event.container.create_receiver(event.connection, self.path)
            else:
                raise Exception()

    def on_connection_opening(self, event):
        # XXX Seems like this should happen by default
        event.connection.container = event.container.container_id

    def on_link_opening(self, event):
        if event.link.is_sender:
            if event.link.remote_source.dynamic:
                address = "{}/{}".format(event.connection.remote_container, event.link.name)
            else:
                address = event.link.remote_source.address

            assert address is not None

            event.link.source.address = address

        if event.link.is_receiver:
            address = event.link.remote_target.address

            assert address is not None

            event.link.target.address = address

    def on_sendable(self, event):
        assert self.operation == "send"

        message = Message()

        while event.sender.credit > 0:
            if (self.desired_count > 0 and self.sent == self.desired_count):
                break

            id = str(self.sent + 1)
            stime = now()

            message.clear()
            message.body = self.body
            message.id = id
            message.properties = {"SendTime": stime}

            if self.durable:
                message.durable = True

            event.sender.send(message)
            self.sent += 1

            sys.stdout.write("{},{}\n".format(id, stime))

    def on_accepted(self, event):
        self.accepted += 1

        if self.accepted == self.desired_count:
            self.stop(event)

    def on_message(self, event):
        assert self.operation == "receive"

        self.received += 1

        message = event.message
        rtime = now()
        stime = event.message.properties["SendTime"]

        sys.stdout.write("{},{},{}\n".format(message.id, stime, rtime))

        if self.received == self.desired_count:
            self.stop(event)

    def stop(self, event):
        if self.connection is not None:
            self.connection.close()

        if self.connection_mode == "server":
            self.listener.close()

def main():
    enable_logging("warn")

    if len(ARGS) == 1:
        print("Qpid Proton Python {}.{}.{}".format(*VERSION))
        print(proton_module_file)
        print("Python {}".format(" ".join(sys.version.split())))

        exit()

    kwargs = parse_keyword_args(ARGS[1:])

    if int(kwargs["transaction-size"]) > 0:
        exit("This impl doesn't support transactions yet")

    handler = Handler(prefetch=int(kwargs["credit-window"]))
    handler.connection_mode = kwargs["connection-mode"]
    handler.channel_mode = kwargs["channel-mode"]
    handler.operation = kwargs["operation"]
    handler.scheme = kwargs["scheme"] if "scheme" in kwargs and kwargs["scheme"] else "amqp"
    handler.host = kwargs["host"]
    handler.port = kwargs["port"]
    handler.path = kwargs["path"]
    handler.username = kwargs["username"] if "username" in kwargs else None
    handler.password = kwargs["password"] if "password" in kwargs else None
    handler.cert = kwargs["cert"] if "cert" in kwargs else None
    handler.key = kwargs["key"] if "key" in kwargs else None
    handler.desired_duration = int(kwargs["duration"])
    handler.desired_count = int(kwargs["count"])
    handler.body_size = int(kwargs["body-size"])
    handler.durable = int(kwargs["durable"]) == 1
    handler.ssl_domain = None

    if handler.scheme == 'amqps':
        if handler.connection_mode == 'client':
            handler.ssl_domain = SSLDomain(SSLDomain.MODE_CLIENT)
            handler.ssl_domain.set_peer_authentication(SSLDomain.ANONYMOUS_PEER)
            if handler.cert and handler.key:
                handler.ssl_domain.set_credentials(handler.cert, handler.key, None)
        else:
            exit("This impl can't be a server and support TLS")

    container = Container(handler)
    container.container_id = kwargs["id"] # XXX Pass this in the constructor?

    container.run()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
