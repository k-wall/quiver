#!/usr/bin/python2
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import print_function

import os
import sys
import threading

from qpid_messaging import *
from qpid_messaging import __file__ as messaging_module_file

default_home = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default_home)
sys.path.insert(0, os.path.join(home, "python"))

from plano import *
from quiver.common import *

class Client(object):
    def __init__(self):
        self.operation = None
        self.id_ = None
        self.scheme = None
        self.host = None
        self.port = None
        self.path = None
        self.username = None
        self.password = None
        self.desired_duration = None
        self.desired_count = None
        self.body_size = None
        self.credit_window = None
        self.transaction_size = None
        self.durable = False

        self.body = None

        self.start_time = None
        self.sent = 0
        self.received = 0
        self.stopping = threading.Event()

    def run(self):
        self.body = b"x" * self.body_size

        if self.username or self.password:
            domain = "{}/{}@{}:{}".format(self.username if self.username else "",
                                          self.password if self.password else "",
                                          self.host, self.port)
        else:
            domain = "{}:{}".format(self.host, self.port)

        # Qpid Messaging does not support a trust all option (SslSocket.cpp#bad_certificate only
        # can only disable hostname verification but cannot be configured to ignore an unknown cert.
        # Client must set QPID_SSL_CERT_DB refering to a cert-database (certutil(1)) containing the server's cert.
        transport = "ssl" if self.scheme == "amqps" else "tcp"
        mechs = None if self.username or self.password else b"ANONYMOUS"
        conn = Connection(domain,
                          protocol=b"amqp1.0",
                          transport=transport,
                          container_id=self.id_,
                          sasl_mechanisms=mechs,
                          ssl_ignore_hostname_verification_failure=True)

        conn.open()

        self.start_time = now()

        if self.desired_duration > 0:
            def task():
                self.stopping.set()

            timer = threading.Timer(self.desired_duration, task)
            timer.start()

        try:
            transactional = self.transaction_size > 0
            session = conn.session(transactional=transactional)

            if self.operation == "send":
                self.send_messages(session)
            elif self.operation == "receive":
                self.receive_messages(session)
            else:
                raise Exception()

            if transactional:
                session.commit()

            conn.close()
        except ConnectionError as e:
            # Ignore error from remote close
            pass
        except:
            conn.close()
            raise

    def send_messages(self, session):
        sender = session.sender(self.path)
        sender.capacity = self.credit_window

        while not self.stopping.is_set():
            id = str(self.sent + 1)
            stime = now()
            record = "{},{}\n".format(id, stime)

            message = Message(self.body)
            message.id = id
            message.properties[b"SendTime"] = stime

            if self.durable:
                message.durable = True

            sender.send(message, sync=False)
            self.sent +=1

            sys.stdout.write(record)

            if self.transaction_size > 0 and (self.sent % self.transaction_size) == 0:
                session.commit()

            if self.sent == self.desired_count:
                break

    def receive_messages(self, session):
        receiver = session.receiver(self.path)
        receiver.capacity = self.credit_window

        while not self.stopping.is_set():
            if receiver.available() == 0:
                continue

            message = receiver.get()

            self.received +=1

            session.acknowledge()

            stime = message.properties["SendTime"]
            rtime = now()
            record = "{},{},{}\n".format(message.id, stime, rtime)

            sys.stdout.write(record)

            if self.transaction_size > 0 and (self.received % self.transaction_size) == 0:
                session.commit()

            if self.received == self.desired_count:
                break

def main():
    enable_logging("warn")

    if len(ARGS) == 1:
        print("Qpid Messaging Python XXX")
        print(messaging_module_file)
        print("Python {}".format(" ".join(sys.version.split())))

        exit()

    kwargs = parse_keyword_args(ARGS[1:])

    if kwargs["connection-mode"] != "client":
        exit("This impl supports client mode only")

    if kwargs["channel-mode"] != "active":
        exit("This impl supports active mode only")

    if "cert" in kwargs or "key" in kwargs:
        exit("This impl does not support TLS client cert")

    client = Client()
    client.operation = kwargs["operation"]
    client.id_ = kwargs["id"]
    client.scheme = kwargs["scheme"] if "scheme" in kwargs else "amqp"
    client.host = kwargs["host"]
    client.port = kwargs["port"]
    client.path = kwargs["path"]
    client.username = kwargs["username"] if "username" in kwargs else None
    client.password = kwargs["password"] if "password" in kwargs else None
    client.desired_duration = int(kwargs["duration"])
    client.desired_count = int(kwargs["count"])
    client.body_size = int(kwargs["body-size"])
    client.credit_window = int(kwargs["credit-window"])
    client.transaction_size = int(kwargs["transaction-size"])
    client.durable = int(kwargs["durable"]) == 1

    client.run()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
