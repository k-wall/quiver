#!/usr/bin/python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import os
import sys
import uuid

from proton import Message, VERSION, __file__ as proton_module_file
from proton.handlers import MessagingHandler
from proton.reactor import Container, SSLDomain

default_home = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default_home)
sys.path.insert(0, os.path.join(home, "python"))

from plano import *
from quiver.common import now

class Handler(MessagingHandler):
    def __init__(self, **kwargs):
        super(Handler, self).__init__(**kwargs)

        self.connection_mode = None
        self.channel_mode = None
        self.operation = None
        self.host = None
        self.port = None
        self.path = None
        self.messages = None
        self.body_size = None

        self.durable = False

        self.listener = None
        self.body = None

        self.sent = 0
        self.received = 0
        self.accepted = 0

    def on_start(self, event):
        domain = "{}://{}:{}".format(self.scheme, self.host, self.port)

        if self.connection_mode == "client":
            event.container.connect(domain, ssl_domain=self.ssl_domain, allowed_mechs="ANONYMOUS")
        elif self.connection_mode == "server":
            self.listener = event.container.listen(domain)
        else:
            raise Exception()

        self.body = b"x" * self.body_size

    def on_connection_opened(self, event):
        if self.channel_mode == "active":
            if self.operation == "send":
                event.container.create_sender(event.connection, self.path)
            elif self.operation == "receive":
                event.container.create_receiver(event.connection, self.path)
            else:
                raise Exception()

    def on_connection_opening(self, event):
        # XXX Seems like this should happen by default
        event.connection.container = event.container.container_id

    # XXX Should this be necessary?
    def on_link_opening(self, event):
        if event.link.is_sender:
            if event.link.remote_source.dynamic:
                address = str(uuid.uuid4())
            else:
                address = event.link.remote_source.address

            assert address is not None

            event.link.source.address = address

        if event.link.is_receiver:
            address = event.link.remote_target.address

            assert address is not None

            event.link.target.address = address

    def on_sendable(self, event):
        assert self.operation == "send"

        while event.sender.credit > 0 and self.sent < self.messages:
            id = self.sent + 1
            stime = now()

            message = Message(self.body)
            message.id = id
            message.properties = dict() # XXX Obnoxious
            message.properties["SendTime"] = stime

            if self.durable:
                message.durable = True

            event.sender.send(message)
            self.sent += 1

            sys.stdout.write("{},{}\n".format(id, stime))

    def on_accepted(self, event):
        self.accepted += 1

        if self.accepted == self.messages:
            if self.connection_mode == "client":
                event.connection.close()
            elif self.connection_mode == "server":
                self.listener.close()
            else:
                raise Exception()

    def on_message(self, event):
        assert self.operation == "receive"

        if self.received == self.messages:
            return

        self.received += 1

        message = event.message
        rtime = now()
        stime = event.message.properties["SendTime"]

        sys.stdout.write("{},{},{}\n".format(message.id, stime, rtime))

        if self.received == self.messages:
            if self.connection_mode == "client":
                event.connection.close()
            elif self.connection_mode == "server":
                self.listener.close()
            else:
                raise Exception()

def main():
    set_message_threshold("warn")

    if len(ARGS) == 1:
        print("Qpid Proton Python {}.{}.{}".format(*VERSION))
        print(proton_module_file)
        print("Python {}".format(" ".join(sys.version.split())))

        exit()

    transaction_size = int(ARGS[11])

    if transaction_size > 0:
        exit("This impl doesn't support transactions yet")

    credit_window = int(ARGS[10])

    handler = Handler(prefetch=credit_window)
    handler.connection_mode = ARGS[1]
    handler.channel_mode = ARGS[2]
    handler.operation = ARGS[3]
    handler.scheme = ARGS[5]
    handler.host = ARGS[6]
    handler.port = ARGS[7]
    handler.path = ARGS[8]
    handler.messages = int(ARGS[9])
    handler.body_size = int(ARGS[10])

    flags = ARGS[12].split(",")


    if "durable" in flags:
        handler.durable = True

    if handler.scheme == 'amqps':
        handler.ssl_domain = SSLDomain(SSLDomain.MODE_CLIENT if handler.connection_mode == 'client' else SSLDomain.MODE_SERVER)
        if "insecure" in flags:
            handler.ssl_domain.set_peer_authentication(SSLDomain.ANONYMOUS_PEER)

    container = Container(handler)
    container.container_id = ARGS[4]

    container.run()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
