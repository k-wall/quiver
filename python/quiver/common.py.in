#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
from __future__ import with_statement

__version__ = "@version@"

import argparse as _argparse
import json as _json
import numpy as _numpy
import os as _os
import plano as _plano
import resource as _resource
import shlex as _shlex
import signal as _signal
import subprocess as _subprocess
import sys as _sys
import tempfile as _tempfile
import time as _time

try:
    from urllib.parse import urlparse as _urlparse
except ImportError:
    from urlparse import urlparse as _urlparse

_default_home = "@quiver_home@"
_home = _os.environ.get("QUIVER_HOME", _default_home)

_impls = []
_impls_by_name = {}
_impl_names_by_alias = {}

class _Impl(object):
    def __init__(self, kind, name, aliases=[], protocols=["amqp"], peer_to_peer=False, executable=None):
        self.kind = kind
        self.name = name
        self.aliases = aliases
        self.protocols = protocols
        self.peer_to_peer = peer_to_peer
        self.executable = executable

        _impls.append(self)
        _impls_by_name[self.name] = self

        for alias in self.aliases:
            _impl_names_by_alias[alias] = self.name

    @property
    def file(self):
        return _plano.join(_home, "impls", "quiver-{}-{}".format(self.kind, self.name))

    @property
    def exists(self):
        if not _plano.is_file(self.file):
            return False

        if self.executable is not None and _plano.which(self.executable) is None:
            return False

        return True

_Impl("arrow", "activemq-artemis-jms", aliases=["artemis-jms"], protocols=["core"])
_Impl("arrow", "activemq-jms", protocols=["openwire"])
_Impl("arrow", "qpid-jms", aliases=["jms"])
_Impl("arrow", "qpid-messaging-cpp", "arrow")
_Impl("arrow", "qpid-messaging-python", "arrow")
_Impl("arrow", "qpid-proton-cpp", aliases=["cpp"], peer_to_peer=True)
_Impl("arrow", "qpid-proton-c", aliases=["c"], peer_to_peer=True)
_Impl("arrow", "qpid-proton-python", aliases=["python"], peer_to_peer=True)
_Impl("arrow", "rhea", aliases=["javascript"], peer_to_peer=True)
_Impl("arrow", "vertx-proton", aliases=["java"])

_Impl("server", "activemq", protocols=["amqp", "openwire"], executable="activemq")
_Impl("server", "activemq-artemis", aliases=["artemis"], protocols=["amqp", "openwire", "core"], executable="artemis")
_Impl("server", "builtin")
_Impl("server", "qpid-cpp", aliases=["qpidd"], executable="qpidd")
_Impl("server", "qpid-dispatch", aliases=["qdrouterd", "dispatch"], executable="qdrouterd")

def get_impl(name):
    try:
        name = _impl_names_by_alias[name]
    except KeyError:
        pass

    try:
        return _impls_by_name[name]
    except KeyError:
        pass

def require_impl(name, fallback=None):
    impl = get_impl(name)

    if impl is None:
        impl = get_impl(fallback)

    if impl is None:
        raise CommandError("No implementation for '{}'", name)

    if not impl.exists:
        raise CommandError("No implementation for '{}'", impl.name)

    return impl

def impl_exists(name):
    impl = get_impl(name)
    return impl is not None and impl.exists

ARROW_IMPLS = [x.name for x in _impls if x.kind == "arrow"]
PEER_TO_PEER_ARROW_IMPLS = [x.name for x in _impls if x.kind == "arrow" and x.peer_to_peer]
OPENWIRE_ARROW_IMPLS = [x.name for x in _impls if x.kind == "arrow" and "openwire" in x.protocols]
CORE_PROTOCOL_ARROW_IMPLS = [x.name for x in _impls if x.kind == "arrow" and "core" in x.protocols]

SERVER_IMPLS = [x.name for x in _impls if x.kind == "server"]
OPENWIRE_SERVER_IMPLS = [x.name for x in _impls if x.kind == "server" and "openwire" in x.protocols]
CORE_PROTOCOL_SERVER_IMPLS = [x.name for x in _impls if x.kind == "server" and "core" in x.protocols]

DEFAULT_ARROW_IMPL = "qpid-proton-python"
DEFAULT_SERVER_IMPL = "builtin"

class CommandError(Exception):
    def __init__(self, message, *args):
        if isinstance(message, Exception):
            message = str(message)

        message = message.format(*args)

        super(CommandError, self).__init__(message)

class Command(object):
    def __init__(self, home_dir):
        self.home_dir = home_dir

        self.parser = _ArgumentParser()
        self.parser.formatter_class = _Formatter

        self.init_only = False
        self.quiet = False
        self.verbose = False

        self.args = None

    def init(self):
        assert self.parser is not None
        assert self.args is None

        _plano.set_message_threshold("warn")

        self.args = self.parser.parse_args()

    def add_common_test_arguments(self):
        self.parser.add_argument("-m", "--messages", metavar="COUNT",
                                 help="Send or receive COUNT messages",
                                 default="1m")
        self.parser.add_argument("--body-size", metavar="COUNT",
                                 help="Send message bodies containing COUNT bytes",
                                 default="100")
        self.parser.add_argument("--credit", metavar="COUNT",
                                 help="Sustain credit for COUNT incoming messages",
                                 default="1000")
        self.parser.add_argument("--transaction-size", metavar="COUNT",
                                 help="Transfer batches of COUNT messages inside transactions; 0 to disable",
                                 default="0")
        self.parser.add_argument("--durable", action="store_true",
                                 help="Require persistent store-and-forward transfers")
        self.parser.add_argument("--timeout", metavar="SECONDS",
                                 help="Fail after SECONDS without transfers",
                                 default="10")

    def add_common_tool_arguments(self):
        self.parser.add_argument("--quiet", action="store_true",
                                 help="Print nothing to the console")
        self.parser.add_argument("--verbose", action="store_true",
                                 help="Print details to the console")
        self.parser.add_argument("--init-only", action="store_true",
                                 help="Initialize and exit")
        self.parser.add_argument('--version', action='version',
                                 help="Print the version and exit",
                                 version="%(prog)s {}".format(__version__))

    def init_common_test_attributes(self):
        self.messages = self.parse_int_with_unit(self.args.messages)
        self.body_size = self.parse_int_with_unit(self.args.body_size)
        self.credit_window = self.parse_int_with_unit(self.args.credit)
        self.transaction_size = self.parse_int_with_unit(self.args.transaction_size)
        self.durable = self.args.durable
        self.timeout = self.parse_int_with_unit(self.args.timeout)

    def init_common_tool_attributes(self):
        self.init_only = self.args.init_only
        self.quiet = self.args.quiet
        self.verbose = self.args.verbose

        if self.quiet:
            _plano.set_message_threshold("error")

        if self.verbose:
            _plano.set_message_threshold("notice")

    def init_url_attributes(self):
        self.url = self.args.url

        url = _urlparse(self.url)

        if url.path is None:
            raise CommandError("The URL has no path")

        self.scheme = url.scheme
        self.host = url.hostname
        self.port = url.port
        self.path = url.path

        if self.scheme is None:
            self.scheme = 'amqp'

        if self.host is None:
            # XXX Should be "localhost" - a workaround for a proton issue
            self.host = "127.0.0.1"

        if self.port is None:
            self.port = "5672"

        self.port = str(self.port)

        if self.path.startswith("/"):
            self.path = self.path[1:]

    def init_output_dir(self):
        self.output_dir = self.args.output

        if self.output_dir is None:
            self.output_dir = _tempfile.mkdtemp(prefix="quiver-")

        _plano.make_dir(self.output_dir)

        _plano.notice("Saving output files to {}", self.output_dir)

    def parse_int_with_unit(self, value):
        assert self.parser is not None

        try:
            if value.endswith("m"): return int(value[:-1]) * 1000 * 1000
            if value.endswith("k"): return int(value[:-1]) * 1000
            return int(value)
        except ValueError:
            self.parser.error("Failure parsing '{}' as integer with unit".format(value))

    def intercept_impl_info_request(self, default_impl):
        if "--impl-info" in _plano.ARGS:
            _plano.set_message_threshold("warn")

            parser = _argparse.ArgumentParser()
            parser.add_argument("--impl", default=default_impl)

            args, other = parser.parse_known_args(_plano.ARGS)
            impl = require_impl(args.impl)

            _plano.call(impl.file)
            _plano.exit(0)

    def run(self):
        raise NotImplementedError()

    def main(self):
        try:
            self.init()

            if self.init_only:
                return

            self.run()
        except CommandError as e:
            _plano.exit(str(e))
        except KeyboardInterrupt:
            pass

class _ArgumentParser(_argparse.ArgumentParser):
    def error(self, message):
        self.print_usage(_sys.stderr)
        raise CommandError(message)

class _Formatter(_argparse.ArgumentDefaultsHelpFormatter,
                 _argparse.RawDescriptionHelpFormatter):
    pass

def now():
    return int(_time.time() * 1000)
