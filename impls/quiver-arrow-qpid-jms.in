#!/usr/bin/python3
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

import os
import shlex
import sys
import tempfile
import subprocess

default_home = os.path.normpath("@quiver_home@")
home = os.environ.get("QUIVER_HOME", default_home)
sys.path.insert(0, os.path.join(home, "python"))

from plano import *
from quiver.common import *

def create_keystore(cert, key, password):
    keystore = None

    with tempfile.NamedTemporaryFile(delete=True) as tmp:
        keystore = tmp.name

    args = ["/usr/bin/env", "--", "openssl"]
    args += [
        "pkcs12",
        "-export",
        "-passout",
        "pass:{}".format(password),
        "-in",
        cert,
        "-inkey",
        key,
        "-name",
        "client",
        "--out",
        keystore
    ]

    subprocess.check_call(args)
    return keystore

def main():
    enable_logging("warn")

    if "QUIVER_VERBOSE" in ENV:
        enable_logging("notice")

    jar_file = join(home, "java", "quiver-qpid-jms.jar")
    pom_file = join("META-INF", "maven", "org.apache.qpid", "qpid-jms-client", "pom.properties")

    if len(ARGS) == 1:
        call("unzip -p {} {}", jar_file, pom_file)
        call("java -version")
        exit()

    kwargs = parse_keyword_args(ARGS[1:])

    keystore = None
    if "cert" in kwargs and "key" in kwargs:
        keystore = create_keystore(kwargs["cert"], kwargs["key"], "password")

    params = [
        "jms.clientID={}".format(kwargs["id"]),
        "jms.prefetchPolicy.all={}".format(kwargs["credit-window"]),
    ]

    scheme = kwargs["scheme"] if "scheme" in kwargs and kwargs["scheme"] else "amqp"
    if scheme.endswith("s"):
        params.append("transport.verifyHost=false")
        params.append("transport.trustAll=true")

        if keystore:
            params.append("transport.keyStoreLocation={}".format(keystore))
            params.append("transport.keyStorePassword=password")


    use_sasl_anonymous = True
    if "username" in kwargs:
        params.append("jms.username={}".format(kwargs["username"]))
        use_sasl_anonymous = False

    if "password" in kwargs:
        params.append("jms.password={}".format(kwargs["password"]))
        use_sasl_anonymous = False

    if use_sasl_anonymous:
        params.append("amqp.saslMechanisms=ANONYMOUS")

    url = "{}://{}:{}?{}".format(scheme, kwargs["host"], kwargs["port"], "&".join(params))

    args = ["/usr/bin/env", "--", "java"]

    if "JAVA_OPTS" in ENV:
        args += shlex.split(ENV["JAVA_OPTS"])

    args += [
        "-Darrow.jms.url={}".format(url),
        "-Djava.naming.factory.initial=org.apache.qpid.jms.jndi.JmsInitialContextFactory",
        "-Dorg.slf4j.simpleLogger.defaultLogLevel=warn",
        "-classpath", jar_file,
        "net.ssorj.quiver.QuiverArrowJms",
    ]

    args += ARGS[1:]

    exec_process(args)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
